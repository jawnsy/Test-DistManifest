name        = Test-DistManifest
author      = Jonathan Yu <jawnsy@cpan.org>
copyright_holder = Jonathan Yu <jawnsy@cpan.org>
copyright_year = 2008
license     = Perl_5

; -- begin unrolled [@Author::ETHER]

;;; VersionProvider
[RewriteVersion]
global = 1
add_tarball_name = 0


;;; BeforeBuild
[PromptIfStale / stale modules, release]
phase = release
check_all_plugins = 1
check_all_prereqs = 1


;;; Finders
[FileFinder::ByName / Examples]
dir = examples


;;; Gather Files
[Git::GatherDir]
:version = 2.016
exclude_filename = CONTRIBUTING
exclude_filename = INSTALL
exclude_filename = LICENCE
exclude_filename = LICENSE
exclude_filename = README.pod
exclude_filename = TODO

[MetaYAML]
[MetaJSON]
[Readme]
[Manifest]
[License]
:version = 5.038
filename = LICENCE  ; we are Canadians

; authordep Dist::Zilla::PluginBundle::Author::ETHER
[GenerateFile::ShareDir / generate CONTRIBUTING]
-dist = Dist-Zilla-PluginBundle-Author-ETHER
-filename = CONTRIBUTING
has_xs = 0
[InstallGuide]
:version = 1.200005

[Test::Compile]
:version = 2.039
bail_out_on_fail = 1
xt_mode = 1
script_finder = :PerlExecFiles
script_finder = Examples

[Test::NoTabs]
:version = 0.08
finder = :InstallModules
finder = :ExecFiles
finder = Examples
finder = :TestFiles
finder = :ExtraTestFiles

[Test::EOL]
:version = 0.17
finder = :InstallModules
finder = :ExecFiles
finder = Examples
finder = :TestFiles
finder = :ExtraTestFiles

[MetaTests]
[Test::CPAN::Changes]
:version = 0.008
[Test::ChangesHasContent]
[Test::MinimumVersion]
:version = 2.000003
max_target_perl = 5.006
[PodSyntaxTests]
:version = 5.040
[PodCoverageTests]
:version = 5.040
[Test::PodSpelling]
:version = 2.006003
stopwords = irc

;[Test::Pod::LinkCheck]     many outstanding bugs
[Test::Pod::No404s]
:version = 1.002
[Test::Kwalitee]
:version = 2.10
filename = xt/author/kwalitee.t
[MojibakeTests]
:version = 0.8
[Test::ReportPrereqs]
:version = 0.019
verify_prereqs = 1
include = Pod::Coverage
[Test::Portability]
[Test::CleanNamespaces]
:version = 0.006


;;; Munge Files
[Git::Describe]
:version = 0.004
on_package_line = 1

; authordep Pod::Weaver::PluginBundle::Author::ETHER
[PodWeaver]
:version = 4.005
config_plugin = @Author::ETHER
replacer = replace_with_comment
post_code_replacer = replace_with_nothing


;;; Metadata
[GithubMeta]    ; (if server = 'github' or omitted)
:version = 0.54
homepage = 0
issues = 0

[AutoMetaResources]
bugtracker.rt = 1
; (plus repository.* = 1 if server = 'gitmo' or 'p5sagit')

[AuthorityFromModule]
:version = 0.002
[Authority]
:version = 1.009
authority = cpan:JAWNSY
do_munging = 0

[MetaNoIndex]
directory = examples
directory = t
directory = xt

[MetaProvides::Package]
:version = 1.15000002
finder = :InstallModules
meta_noindex = 1
inherit_version = 0
inherit_missing = 0

[MetaConfig]
[Keywords]
:version = 0.004
[Git::Contributors]
:version = 0.004
order_by = commits


;;; Register Prereqs
[AutoPrereqs]
:version = 5.038
[Prereqs::AuthorDeps]
[MinimumPerl]
:version = 1.006
configure_finder = :NoFiles


;;; Install Tool
[MakeMaker]
eumm_version = 0
default_jobs = 9


;;; Test Runner
; (MakeMaker)
[RunExtraTests]
:version = 0.024
default_jobs = 9


;;; After Build
[CheckSelfDependency]

[Run::AfterBuild / .ackrc]
:version = 0.038
quiet = 1
run = bash -c "test -e .ackrc && grep -q -- '--ignore-dir=.latest' .ackrc || echo '--ignore-dir=.latest' >> .ackrc; if [[ `dirname '%d'` != .build ]]; then test -e .ackrc && grep -q -- '--ignore-dir=%d' .ackrc || echo '--ignore-dir=%d' >> .ackrc; fi"
[Run::AfterBuild / .latest]
:version = 0.038
quiet = 1
eval = if ('%d' =~ /^%n-[.[:xdigit:]]+$/) { unlink '.latest'; symlink '%d', '.latest'; }


;;; Before Release
[CheckStrictVersion]
decimal_only = 1

[Git::Check / initial check]
allow_dirty =

[Git::CheckFor::MergeConflicts]

[Git::CheckFor::CorrectBranch]
:version = 0.004
release_branch = master

[Git::Remote::Check]
branch = master
remote_branch = master

[CheckPrereqsIndexed]
[TestRelease]
[Git::Check / after tests]
allow_dirty =
[CheckIssues]
;(onfirmRelease)


;;; Releaser
[UploadToCPAN]


;;; AfterRelease
[Run::AfterRelease / remove old LICENCE]    ; if switching from LICENCE -> LICENSE
:version = 0.038
quiet = 1
eval = unlink 'LICENCE'

[Run::AfterRelease / remove old LICENSE]    ; if switching from LICENSE -> LICENCE
:version = 0.038
quiet = 1
eval = unlink 'LICENSE'

[CopyFilesFromRelease]
filename = CONTRIBUTING
filename = Changes
filename = INSTALL
filename = LICENCE
filename = LICENSE

[ReadmeAnyFromPod]
:version = 0.142180
type = pod
location = root
phase = release

[Git::Commit / release snapshot]
:version = 2.020
add_files_in = .
allow_dirty = CONTRIBUTING
allow_dirty = Changes
allow_dirty = INSTALL
allow_dirty = LICENCE
allow_dirty = LICENSE
allow_dirty = README.pod
commit_msg = %N-%v%t%n%n%c

[Git::Tag]
tag_format = v%v
tag_message = v%v%t

[GitHub::Update]    ; (if server = 'github' or omitted)
:version = 0.40
metacpan = 1

[BumpVersionAfterRelease]
global = 1

[NextRelease]
:version = 5.033
time_zone = UTC
format = %-8v  %{yyyy-MM-dd HH:mm:ss'Z'}d%{ (TRIAL RELEASE)}T

[Git::Commit / post-release commit]
:version = 2.020
allow_dirty = Changes
allow_dirty_match = ^lib/.*\.pm$
commit_msg = increment $VERSION after %v release

[Git::Push]

[Run::AfterRelease / install release]
:version = 0.031
fatal_errors = 0
run = cpanm http://URMOM:mysekritpassword@pause.perl.org/pub/PAUSE/authors/id/U/UR/URMOM/%a

[Run::AfterRelease / release complete]
:version = 0.038
quiet = 1
eval = print "release complete!\xa"

; listed late, to allow all other plugins which do BeforeRelease checks to run first.
[ConfirmRelease]

; listed last, to be sure we run at the very end of each phase
; only performed if $ENV{USER} eq 'ether'
[VerifyPhases / PHASE VERIFICATION]

; -- end unrolled [@Author::ETHER]

[Prereqs / RuntimeRecommends]
ExtUtils::Manifest = 1.70

[Prereqs / DevelopRequires]
Test::Warnings = 0

[Encoding]
encoding = bytes
match = ^t/corpus/

[MetaResources / community]
x_IRC = irc://irc.perl.org/#perl-qa
x_MailingList = http://lists.perl.org/list/perl-qa.html
